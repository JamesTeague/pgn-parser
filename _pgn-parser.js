// Generated by Peggy 1.1.0.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { pgn: peg$parsepgn, tags: peg$parsetags, game: peg$parsegame, games: peg$parsegames };
  var peg$startRuleFunction = peg$parsepgn;

  var peg$c0 = function(head, m) { return m; };
  var peg$c1 = function(head, tail) {
              //console.log("Length tail: " + tail.length);
              return [head].concat(tail) };
  var peg$c2 = function(games) {
              //console.log("Length: " + games.length);
              return games; };
  var peg$c3 = function(t, c, p) {
        //console.log("Length pgn: " + p.length);
        var mess = messages; messages = {};
        return { tags: t, gameComment: c, moves: p, messages: mess }; };
  var peg$c4 = function(head, tail) {
          var result = {};
          [head].concat(tail).forEach(function(element) {
            result[element.name] = element.value;
          });
          return result;
        };
  var peg$c5 = function(members) { if (members === null) return {};
        members.messages = messages; return members;};
  var peg$c6 = function(tag) { return tag; };
  var peg$c7 = function(value) { return { name: 'Event', value: value }; };
  var peg$c8 = function(value) { return { name: 'Site', value: value }; };
  var peg$c9 = function(value) { return { name: 'Date', value: value }; };
  var peg$c10 = function(value) { return { name: 'Round', value: value }; };
  var peg$c11 = function(value) { return { name: 'WhiteTitle', value: value }; };
  var peg$c12 = function(value) { return { name: 'BlackTitle', value: value }; };
  var peg$c13 = function(value) { return { name: 'WhiteELO', value: value }; };
  var peg$c14 = function(value) { return { name: 'BlackELO', value: value }; };
  var peg$c15 = function(value) { return { name: 'WhiteUSCF', value: value }; };
  var peg$c16 = function(value) { return { name: 'BlackUSCF', value: value }; };
  var peg$c17 = function(value) { return { name: 'WhiteNA', value: value }; };
  var peg$c18 = function(value) { return { name: 'BlackNA', value: value }; };
  var peg$c19 = function(value) { return { name: 'WhiteType', value: value }; };
  var peg$c20 = function(value) { return { name: 'BlackType', value: value }; };
  var peg$c21 = function(value) { return { name: 'White', value: value }; };
  var peg$c22 = function(value) { return { name: 'Black', value: value }; };
  var peg$c23 = function(value) { return { name: 'Result', value: value }; };
  var peg$c24 = function(value) { return { name: 'EventDate', value: value }; };
  var peg$c25 = function(value) { return { name: 'EventSponsor', value: value }; };
  var peg$c26 = function(value) { return { name: 'Section', value: value }; };
  var peg$c27 = function(value) { return { name: 'Stage', value: value }; };
  var peg$c28 = function(value) { return { name: 'Board', value: value }; };
  var peg$c29 = function(value) { return { name: 'Opening', value: value }; };
  var peg$c30 = function(value) { return { name: 'Variation', value: value }; };
  var peg$c31 = function(value) { return { name: 'SubVariation', value: value }; };
  var peg$c32 = function(value) { return { name: 'ECO', value: value }; };
  var peg$c33 = function(value) { return { name: 'NIC', value: value }; };
  var peg$c34 = function(value) { return { name: 'Time', value: value }; };
  var peg$c35 = function(value) { return { name: 'UTCTime', value: value }; };
  var peg$c36 = function(value) { return { name: 'UTCDate', value: value }; };
  var peg$c37 = function(value) { return { name: 'TimeControl', value: value }; };
  var peg$c38 = function(value) { return { name: 'SetUp', value: value }; };
  var peg$c39 = function(value) { return { name: 'FEN', value: value }; };
  var peg$c40 = function(value) { return { name: 'Termination', value: value }; };
  var peg$c41 = function(value) { return { name: 'Annotator', value: value }; };
  var peg$c42 = function(value) { return { name: 'Mode', value: value }; };
  var peg$c43 = function(value) { return { name: 'PlyCount', value: value }; };
  var peg$c44 = function(value) { return { name: 'Variant', value: value }; };
  var peg$c45 = function(value) { return { name: 'WhiteRatingDiff', value: value }; };
  var peg$c46 = function(value) { return { name: 'BlackRatingDiff', value: value }; };
  var peg$c47 = function(value) { return { name: 'WhiteFideId', value: value }; };
  var peg$c48 = function(value) { return { name: 'BlackFideId', value: value }; };
  var peg$c49 = function(value) { return { name: 'WhiteTeam', value: value }; };
  var peg$c50 = function(value) { return { name: 'BlackTeam', value: value }; };
  var peg$c51 = function(a, value) { var res = location(); res.key = a; res.value = value; res.message = "Format of tag: " + a + " not correct: " + value;
  	        messages.push(res); return { name: a, value: value }; };
  var peg$c52 = function(a, value) { return { name: a, value: value }; };
  var peg$c53 = "Event";
  var peg$c54 = peg$literalExpectation("Event", false);
  var peg$c55 = "event";
  var peg$c56 = peg$literalExpectation("event", false);
  var peg$c57 = "Site";
  var peg$c58 = peg$literalExpectation("Site", false);
  var peg$c59 = "site";
  var peg$c60 = peg$literalExpectation("site", false);
  var peg$c61 = "Date";
  var peg$c62 = peg$literalExpectation("Date", false);
  var peg$c63 = "date";
  var peg$c64 = peg$literalExpectation("date", false);
  var peg$c65 = "Round";
  var peg$c66 = peg$literalExpectation("Round", false);
  var peg$c67 = "round";
  var peg$c68 = peg$literalExpectation("round", false);
  var peg$c69 = "White";
  var peg$c70 = peg$literalExpectation("White", false);
  var peg$c71 = "white";
  var peg$c72 = peg$literalExpectation("white", false);
  var peg$c73 = "Black";
  var peg$c74 = peg$literalExpectation("Black", false);
  var peg$c75 = "black";
  var peg$c76 = peg$literalExpectation("black", false);
  var peg$c77 = "Result";
  var peg$c78 = peg$literalExpectation("Result", false);
  var peg$c79 = "result";
  var peg$c80 = peg$literalExpectation("result", false);
  var peg$c81 = "WhiteTitle";
  var peg$c82 = peg$literalExpectation("WhiteTitle", false);
  var peg$c83 = "Whitetitle";
  var peg$c84 = peg$literalExpectation("Whitetitle", false);
  var peg$c85 = "whitetitle";
  var peg$c86 = peg$literalExpectation("whitetitle", false);
  var peg$c87 = "whiteTitle";
  var peg$c88 = peg$literalExpectation("whiteTitle", false);
  var peg$c89 = "BlackTitle";
  var peg$c90 = peg$literalExpectation("BlackTitle", false);
  var peg$c91 = "Blacktitle";
  var peg$c92 = peg$literalExpectation("Blacktitle", false);
  var peg$c93 = "blacktitle";
  var peg$c94 = peg$literalExpectation("blacktitle", false);
  var peg$c95 = "blackTitle";
  var peg$c96 = peg$literalExpectation("blackTitle", false);
  var peg$c97 = "WhiteELO";
  var peg$c98 = peg$literalExpectation("WhiteELO", false);
  var peg$c99 = "WhiteElo";
  var peg$c100 = peg$literalExpectation("WhiteElo", false);
  var peg$c101 = "Whiteelo";
  var peg$c102 = peg$literalExpectation("Whiteelo", false);
  var peg$c103 = "whiteelo";
  var peg$c104 = peg$literalExpectation("whiteelo", false);
  var peg$c105 = "whiteElo";
  var peg$c106 = peg$literalExpectation("whiteElo", false);
  var peg$c107 = "BlackELO";
  var peg$c108 = peg$literalExpectation("BlackELO", false);
  var peg$c109 = "BlackElo";
  var peg$c110 = peg$literalExpectation("BlackElo", false);
  var peg$c111 = "Blackelo";
  var peg$c112 = peg$literalExpectation("Blackelo", false);
  var peg$c113 = "blackelo";
  var peg$c114 = peg$literalExpectation("blackelo", false);
  var peg$c115 = "blackElo";
  var peg$c116 = peg$literalExpectation("blackElo", false);
  var peg$c117 = "WhiteUSCF";
  var peg$c118 = peg$literalExpectation("WhiteUSCF", false);
  var peg$c119 = "WhiteUscf";
  var peg$c120 = peg$literalExpectation("WhiteUscf", false);
  var peg$c121 = "Whiteuscf";
  var peg$c122 = peg$literalExpectation("Whiteuscf", false);
  var peg$c123 = "whiteuscf";
  var peg$c124 = peg$literalExpectation("whiteuscf", false);
  var peg$c125 = "whiteUscf";
  var peg$c126 = peg$literalExpectation("whiteUscf", false);
  var peg$c127 = "BlackUSCF";
  var peg$c128 = peg$literalExpectation("BlackUSCF", false);
  var peg$c129 = "BlackUscf";
  var peg$c130 = peg$literalExpectation("BlackUscf", false);
  var peg$c131 = "Blackuscf";
  var peg$c132 = peg$literalExpectation("Blackuscf", false);
  var peg$c133 = "blackuscf";
  var peg$c134 = peg$literalExpectation("blackuscf", false);
  var peg$c135 = "blackUscf";
  var peg$c136 = peg$literalExpectation("blackUscf", false);
  var peg$c137 = "WhiteNA";
  var peg$c138 = peg$literalExpectation("WhiteNA", false);
  var peg$c139 = "WhiteNa";
  var peg$c140 = peg$literalExpectation("WhiteNa", false);
  var peg$c141 = "Whitena";
  var peg$c142 = peg$literalExpectation("Whitena", false);
  var peg$c143 = "whitena";
  var peg$c144 = peg$literalExpectation("whitena", false);
  var peg$c145 = "whiteNa";
  var peg$c146 = peg$literalExpectation("whiteNa", false);
  var peg$c147 = "whiteNA";
  var peg$c148 = peg$literalExpectation("whiteNA", false);
  var peg$c149 = "BlackNA";
  var peg$c150 = peg$literalExpectation("BlackNA", false);
  var peg$c151 = "BlackNa";
  var peg$c152 = peg$literalExpectation("BlackNa", false);
  var peg$c153 = "Blackna";
  var peg$c154 = peg$literalExpectation("Blackna", false);
  var peg$c155 = "blackna";
  var peg$c156 = peg$literalExpectation("blackna", false);
  var peg$c157 = "blackNA";
  var peg$c158 = peg$literalExpectation("blackNA", false);
  var peg$c159 = "blackNa";
  var peg$c160 = peg$literalExpectation("blackNa", false);
  var peg$c161 = "WhiteType";
  var peg$c162 = peg$literalExpectation("WhiteType", false);
  var peg$c163 = "Whitetype";
  var peg$c164 = peg$literalExpectation("Whitetype", false);
  var peg$c165 = "whitetype";
  var peg$c166 = peg$literalExpectation("whitetype", false);
  var peg$c167 = "whiteType";
  var peg$c168 = peg$literalExpectation("whiteType", false);
  var peg$c169 = "BlackType";
  var peg$c170 = peg$literalExpectation("BlackType", false);
  var peg$c171 = "Blacktype";
  var peg$c172 = peg$literalExpectation("Blacktype", false);
  var peg$c173 = "blacktype";
  var peg$c174 = peg$literalExpectation("blacktype", false);
  var peg$c175 = "blackType";
  var peg$c176 = peg$literalExpectation("blackType", false);
  var peg$c177 = "EventDate";
  var peg$c178 = peg$literalExpectation("EventDate", false);
  var peg$c179 = "Eventdate";
  var peg$c180 = peg$literalExpectation("Eventdate", false);
  var peg$c181 = "eventdate";
  var peg$c182 = peg$literalExpectation("eventdate", false);
  var peg$c183 = "eventDate";
  var peg$c184 = peg$literalExpectation("eventDate", false);
  var peg$c185 = "EventSponsor";
  var peg$c186 = peg$literalExpectation("EventSponsor", false);
  var peg$c187 = "Eventsponsor";
  var peg$c188 = peg$literalExpectation("Eventsponsor", false);
  var peg$c189 = "eventsponsor";
  var peg$c190 = peg$literalExpectation("eventsponsor", false);
  var peg$c191 = "eventSponsor";
  var peg$c192 = peg$literalExpectation("eventSponsor", false);
  var peg$c193 = "Section";
  var peg$c194 = peg$literalExpectation("Section", false);
  var peg$c195 = "section";
  var peg$c196 = peg$literalExpectation("section", false);
  var peg$c197 = "Stage";
  var peg$c198 = peg$literalExpectation("Stage", false);
  var peg$c199 = "stage";
  var peg$c200 = peg$literalExpectation("stage", false);
  var peg$c201 = "Board";
  var peg$c202 = peg$literalExpectation("Board", false);
  var peg$c203 = "board";
  var peg$c204 = peg$literalExpectation("board", false);
  var peg$c205 = "Opening";
  var peg$c206 = peg$literalExpectation("Opening", false);
  var peg$c207 = "opening";
  var peg$c208 = peg$literalExpectation("opening", false);
  var peg$c209 = "Variation";
  var peg$c210 = peg$literalExpectation("Variation", false);
  var peg$c211 = "variation";
  var peg$c212 = peg$literalExpectation("variation", false);
  var peg$c213 = "SubVariation";
  var peg$c214 = peg$literalExpectation("SubVariation", false);
  var peg$c215 = "Subvariation";
  var peg$c216 = peg$literalExpectation("Subvariation", false);
  var peg$c217 = "subvariation";
  var peg$c218 = peg$literalExpectation("subvariation", false);
  var peg$c219 = "subVariation";
  var peg$c220 = peg$literalExpectation("subVariation", false);
  var peg$c221 = "ECO";
  var peg$c222 = peg$literalExpectation("ECO", false);
  var peg$c223 = "Eco";
  var peg$c224 = peg$literalExpectation("Eco", false);
  var peg$c225 = "eco";
  var peg$c226 = peg$literalExpectation("eco", false);
  var peg$c227 = "NIC";
  var peg$c228 = peg$literalExpectation("NIC", false);
  var peg$c229 = "Nic";
  var peg$c230 = peg$literalExpectation("Nic", false);
  var peg$c231 = "nic";
  var peg$c232 = peg$literalExpectation("nic", false);
  var peg$c233 = "Time";
  var peg$c234 = peg$literalExpectation("Time", false);
  var peg$c235 = "time";
  var peg$c236 = peg$literalExpectation("time", false);
  var peg$c237 = "UTCTime";
  var peg$c238 = peg$literalExpectation("UTCTime", false);
  var peg$c239 = "UTCtime";
  var peg$c240 = peg$literalExpectation("UTCtime", false);
  var peg$c241 = "UtcTime";
  var peg$c242 = peg$literalExpectation("UtcTime", false);
  var peg$c243 = "Utctime";
  var peg$c244 = peg$literalExpectation("Utctime", false);
  var peg$c245 = "utctime";
  var peg$c246 = peg$literalExpectation("utctime", false);
  var peg$c247 = "utcTime";
  var peg$c248 = peg$literalExpectation("utcTime", false);
  var peg$c249 = "UTCDate";
  var peg$c250 = peg$literalExpectation("UTCDate", false);
  var peg$c251 = "UTCdate";
  var peg$c252 = peg$literalExpectation("UTCdate", false);
  var peg$c253 = "UtcDate";
  var peg$c254 = peg$literalExpectation("UtcDate", false);
  var peg$c255 = "Utcdate";
  var peg$c256 = peg$literalExpectation("Utcdate", false);
  var peg$c257 = "utcdate";
  var peg$c258 = peg$literalExpectation("utcdate", false);
  var peg$c259 = "utcDate";
  var peg$c260 = peg$literalExpectation("utcDate", false);
  var peg$c261 = "TimeControl";
  var peg$c262 = peg$literalExpectation("TimeControl", false);
  var peg$c263 = "Timecontrol";
  var peg$c264 = peg$literalExpectation("Timecontrol", false);
  var peg$c265 = "timecontrol";
  var peg$c266 = peg$literalExpectation("timecontrol", false);
  var peg$c267 = "timeControl";
  var peg$c268 = peg$literalExpectation("timeControl", false);
  var peg$c269 = "SetUp";
  var peg$c270 = peg$literalExpectation("SetUp", false);
  var peg$c271 = "Setup";
  var peg$c272 = peg$literalExpectation("Setup", false);
  var peg$c273 = "setup";
  var peg$c274 = peg$literalExpectation("setup", false);
  var peg$c275 = "setUp";
  var peg$c276 = peg$literalExpectation("setUp", false);
  var peg$c277 = "FEN";
  var peg$c278 = peg$literalExpectation("FEN", false);
  var peg$c279 = "Fen";
  var peg$c280 = peg$literalExpectation("Fen", false);
  var peg$c281 = "fen";
  var peg$c282 = peg$literalExpectation("fen", false);
  var peg$c283 = "Termination";
  var peg$c284 = peg$literalExpectation("Termination", false);
  var peg$c285 = "termination";
  var peg$c286 = peg$literalExpectation("termination", false);
  var peg$c287 = "Annotator";
  var peg$c288 = peg$literalExpectation("Annotator", false);
  var peg$c289 = "annotator";
  var peg$c290 = peg$literalExpectation("annotator", false);
  var peg$c291 = "Mode";
  var peg$c292 = peg$literalExpectation("Mode", false);
  var peg$c293 = "mode";
  var peg$c294 = peg$literalExpectation("mode", false);
  var peg$c295 = "PlyCount";
  var peg$c296 = peg$literalExpectation("PlyCount", false);
  var peg$c297 = "Plycount";
  var peg$c298 = peg$literalExpectation("Plycount", false);
  var peg$c299 = "plycount";
  var peg$c300 = peg$literalExpectation("plycount", false);
  var peg$c301 = "plyCount";
  var peg$c302 = peg$literalExpectation("plyCount", false);
  var peg$c303 = "Variant";
  var peg$c304 = peg$literalExpectation("Variant", false);
  var peg$c305 = "variant";
  var peg$c306 = peg$literalExpectation("variant", false);
  var peg$c307 = "WhiteRatingDiff";
  var peg$c308 = peg$literalExpectation("WhiteRatingDiff", false);
  var peg$c309 = "BlackRatingDiff";
  var peg$c310 = peg$literalExpectation("BlackRatingDiff", false);
  var peg$c311 = "WhiteFideId";
  var peg$c312 = peg$literalExpectation("WhiteFideId", false);
  var peg$c313 = "BlackFideId";
  var peg$c314 = peg$literalExpectation("BlackFideId", false);
  var peg$c315 = "WhiteTeam";
  var peg$c316 = peg$literalExpectation("WhiteTeam", false);
  var peg$c317 = "BlackTeam";
  var peg$c318 = peg$literalExpectation("BlackTeam", false);
  var peg$c319 = peg$otherExpectation("whitespace");
  var peg$c320 = /^[ \t\n\r]/;
  var peg$c321 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$c322 = /^[\n\r]/;
  var peg$c323 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$c324 = peg$otherExpectation("string");
  var peg$c325 = function(chars) { return chars.join(""); };
  var peg$c326 = /^[\-a-zA-Z0-9.]/;
  var peg$c327 = peg$classExpectation(["-", ["a", "z"], ["A", "Z"], ["0", "9"], "."], false, false);
  var peg$c328 = "\"";
  var peg$c329 = peg$literalExpectation("\"", false);
  var peg$c330 = /^[^\0-\x1F"\\]/;
  var peg$c331 = peg$classExpectation([["\0", "\x1F"], "\"", "\\"], true, false);
  var peg$c332 = /^[0-9?]/;
  var peg$c333 = peg$classExpectation([["0", "9"], "?"], false, false);
  var peg$c334 = ".";
  var peg$c335 = peg$literalExpectation(".", false);
  var peg$c336 = function(year, month, day) { let val = "" + year.join("") + '.' + month.join("") + '.' + day.join("");
  	    return { value: val, year: mi(year), month: mi(month), day: mi(day) }; };
  var peg$c337 = /^[0-9]/;
  var peg$c338 = peg$classExpectation([["0", "9"]], false, false);
  var peg$c339 = ":";
  var peg$c340 = peg$literalExpectation(":", false);
  var peg$c341 = function(hour, minute, second, millis) { let val = hour.join("") + ':' + minute.join("") + ':' + second.join("");
        millis ? val = val + '.' + millis : val;
        let ms = millis ? mi(millis) : 0;
        return { value: val, hour: mi(hour), minute: mi(minute), second: mi(second), millis: ms }; };
  var peg$c342 = function(millis) { return millis.join(""); };
  var peg$c343 = function(res) { return res; };
  var peg$c344 = "?";
  var peg$c345 = peg$literalExpectation("?", false);
  var peg$c346 = function() { return { kind: 'unknown', value: '?' }; };
  var peg$c347 = "-";
  var peg$c348 = peg$literalExpectation("-", false);
  var peg$c349 = function() { return { kind: 'unlimited', value: '-' }; };
  var peg$c350 = "/";
  var peg$c351 = peg$literalExpectation("/", false);
  var peg$c352 = function(moves, seconds) { return { kind: 'movesInSeconds', moves: moves, seconds: seconds }; };
  var peg$c353 = "+";
  var peg$c354 = peg$literalExpectation("+", false);
  var peg$c355 = function(seconds, incr) { return { kind: 'increment', seconds: seconds, increment: incr }; };
  var peg$c356 = function(seconds) { return { kind: 'suddenDeath', seconds: seconds }; };
  var peg$c357 = "*";
  var peg$c358 = peg$literalExpectation("*", false);
  var peg$c359 = function(seconds) { return { kind: 'hourglass', seconds: seconds }; };
  var peg$c360 = "1-0";
  var peg$c361 = peg$literalExpectation("1-0", false);
  var peg$c362 = function(res) {return res; };
  var peg$c363 = "0-1";
  var peg$c364 = peg$literalExpectation("0-1", false);
  var peg$c365 = "1/2-1/2";
  var peg$c366 = peg$literalExpectation("1/2-1/2", false);
  var peg$c367 = function(digits) { return makeInteger(digits); };
  var peg$c368 = function(cm, mn, hm, nag, ca, vari, all) { var arr = (all ? all : []);
        var move = {}; move.moveNumber = mn; move.notation = hm;
        if (ca) { move.commentAfter = ca.comment };
        if (cm) { move.commentMove = cm.comment };
        move.variations = (vari ? vari : []); move.nag = (nag ? nag : null); arr.unshift(move); 
        move.commentDiag = ca;
        return arr; };
  var peg$c369 = function(e) {return e; };
  var peg$c370 = function(eg) { return [eg]; };
  var peg$c371 = function(cf, c) { return c };
  var peg$c372 = function(cf, cfl) { return merge([cf].concat(cfl)) };
  var peg$c373 = function(cm) { return cm;};
  var peg$c374 = function(cm) { return { comment: cm}; };
  var peg$c375 = "%csl";
  var peg$c376 = peg$literalExpectation("%csl", false);
  var peg$c377 = function(cf, ic) { return ic };
  var peg$c378 = function(cf, tail) { return merge([{ colorFields: cf }].concat(tail[0])) };
  var peg$c379 = "%cal";
  var peg$c380 = peg$literalExpectation("%cal", false);
  var peg$c381 = function(ca, ic) { return ic };
  var peg$c382 = function(ca, tail) { return merge([{ colorArrows: ca }].concat(tail[0])) };
  var peg$c383 = "%";
  var peg$c384 = peg$literalExpectation("%", false);
  var peg$c385 = function(cc, cv, ic) { return ic };
  var peg$c386 = function(cc, cv, tail) { var ret = {}; ret[cc]= cv; return merge([ret].concat(tail[0])) };
  var peg$c387 = "%eval";
  var peg$c388 = peg$literalExpectation("%eval", false);
  var peg$c389 = function(ev, ic) { return ic };
  var peg$c390 = function(ev, tail) { var ret = {};  ret["eval"]= parseFloat(ev); return merge([ret].concat(tail[0])) };
  var peg$c391 = function(ac, ic) { return ic };
  var peg$c392 = function(ac, tail) { return tail[0] };
  var peg$c393 = function(c, ic) { return ic };
  var peg$c394 = function(c, tail) { if (tail.length > 0) { return merge([{ comment: trimEnd(c.join("")) }].concat(trimStart(tail[0]))) }
          else { return { comment: c.join("") } } };
  var peg$c395 = "[%";
  var peg$c396 = peg$literalExpectation("[%", false);
  var peg$c397 = "}";
  var peg$c398 = peg$literalExpectation("}", false);
  var peg$c399 = peg$anyExpectation();
  var peg$c400 = function(char) { return char; };
  var peg$c401 = /^[^\n\r]/;
  var peg$c402 = peg$classExpectation(["\n", "\r"], true, false);
  var peg$c403 = function(cm) { return cm.join(""); };
  var peg$c404 = ",";
  var peg$c405 = peg$literalExpectation(",", false);
  var peg$c406 = function(cf, cfl) { var arr = []; arr.push(cf); for (var i=0; i < cfl.length; i++) { arr.push(cfl[i][2])}; return arr; };
  var peg$c407 = function(col, f) { return col + f; };
  var peg$c408 = function(col, ff, ft) { return col + ff + ft; };
  var peg$c409 = "Y";
  var peg$c410 = peg$literalExpectation("Y", false);
  var peg$c411 = function() { return "Y"; };
  var peg$c412 = "G";
  var peg$c413 = peg$literalExpectation("G", false);
  var peg$c414 = function() { return "G"; };
  var peg$c415 = "R";
  var peg$c416 = peg$literalExpectation("R", false);
  var peg$c417 = function() { return "R"; };
  var peg$c418 = "B";
  var peg$c419 = peg$literalExpectation("B", false);
  var peg$c420 = function() { return "B"; };
  var peg$c421 = function(col, row) { return col + row; };
  var peg$c422 = "{";
  var peg$c423 = peg$literalExpectation("{", false);
  var peg$c424 = "[";
  var peg$c425 = peg$literalExpectation("[", false);
  var peg$c426 = "]";
  var peg$c427 = peg$literalExpectation("]", false);
  var peg$c428 = ";";
  var peg$c429 = peg$literalExpectation(";", false);
  var peg$c430 = "clk";
  var peg$c431 = peg$literalExpectation("clk", false);
  var peg$c432 = function() { return "clk"; };
  var peg$c433 = "egt";
  var peg$c434 = peg$literalExpectation("egt", false);
  var peg$c435 = function() { return "egt"; };
  var peg$c436 = "emt";
  var peg$c437 = peg$literalExpectation("emt", false);
  var peg$c438 = function() { return "emt"; };
  var peg$c439 = "mct";
  var peg$c440 = peg$literalExpectation("mct", false);
  var peg$c441 = function() { return "mct"; };
  var peg$c442 = function(h1, h2, m1, m2, s1, s2) { var ret = h1; if (h2) { ret += h2 }; ret += ":" + m1 + m2 + ":" + s1 + s2; return ret; };
  var peg$c443 = function(d) { return d; };
  var peg$c444 = function(vari, all) { var arr = (all ? all : []); arr.unshift(vari); return arr; };
  var peg$c445 = "(";
  var peg$c446 = peg$literalExpectation("(", false);
  var peg$c447 = ")";
  var peg$c448 = peg$literalExpectation(")", false);
  var peg$c449 = function(num) { return num; };
  var peg$c450 = peg$otherExpectation("integer");
  var peg$c451 = " ";
  var peg$c452 = peg$literalExpectation(" ", false);
  var peg$c453 = function() { return '';};
  var peg$c454 = function(fig, disc, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.disc =  (disc ? disc : null); hm.strike = (str ? str : null);
      hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.promotion = pr;
      hm.notation = (fig ? fig : "") + (disc ? disc : "") + (str ? str : "") + col + row + (pr ? pr : "") + (ch ? ch : "");
      return hm; };
  var peg$c455 = function(fig, cols, rows, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.strike = (str =='x' ? str : null); hm.col = col; hm.row = row;
      hm.notation = (fig && (fig!=='P') ? fig : "") + cols + rows + (str=='x' ? str : "-") + col  + row + (pr ? pr : "") + (ch ? ch : "");
      hm.check = (ch ? ch : null); hm.promotion = pr; return hm; };
  var peg$c456 = function(fig, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.strike = (str ? str : null); hm.col = col;
      hm.row = row; hm.check = (ch ? ch : null); hm.promotion = pr;
      hm.notation = (fig ? fig : "") + (str ? str : "") + col  + row + (pr ? pr : "") + (ch ? ch : ""); return hm; };
  var peg$c457 = "O-O-O";
  var peg$c458 = peg$literalExpectation("O-O-O", false);
  var peg$c459 = function(ch) { var hm = {}; hm.notation = 'O-O-O'+ (ch ? ch : ""); hm.check = (ch ? ch : null); return  hm; };
  var peg$c460 = "O-O";
  var peg$c461 = peg$literalExpectation("O-O", false);
  var peg$c462 = function(ch) { var hm = {}; hm.notation = 'O-O'+ (ch ? ch : ""); hm.check = (ch ? ch : null); return  hm; };
  var peg$c463 = "@";
  var peg$c464 = peg$literalExpectation("@", false);
  var peg$c465 = function(fig, col, row) { var hm = {}; hm.fig = fig; hm.drop = true; hm.col = col; hm.row = row; hm.notation = fig + '@' + col + row; return hm; };
  var peg$c466 = "+-";
  var peg$c467 = peg$literalExpectation("+-", false);
  var peg$c468 = function(ch) { return ch[1]; };
  var peg$c469 = "$$$";
  var peg$c470 = peg$literalExpectation("$$$", false);
  var peg$c471 = "#";
  var peg$c472 = peg$literalExpectation("#", false);
  var peg$c473 = "=";
  var peg$c474 = peg$literalExpectation("=", false);
  var peg$c475 = function(f) { return '=' + f; };
  var peg$c476 = function(nag, nags) { var arr = (nags ? nags : []); arr.unshift(nag); return arr; };
  var peg$c477 = "$";
  var peg$c478 = peg$literalExpectation("$", false);
  var peg$c479 = function(num) { return '$' + num; };
  var peg$c480 = "!!";
  var peg$c481 = peg$literalExpectation("!!", false);
  var peg$c482 = function() { return '$3'; };
  var peg$c483 = "??";
  var peg$c484 = peg$literalExpectation("??", false);
  var peg$c485 = function() { return '$4'; };
  var peg$c486 = "!?";
  var peg$c487 = peg$literalExpectation("!?", false);
  var peg$c488 = function() { return '$5'; };
  var peg$c489 = "?!";
  var peg$c490 = peg$literalExpectation("?!", false);
  var peg$c491 = function() { return '$6'; };
  var peg$c492 = "!";
  var peg$c493 = peg$literalExpectation("!", false);
  var peg$c494 = function() { return '$1'; };
  var peg$c495 = function() { return '$2'; };
  var peg$c496 = "\u203C";
  var peg$c497 = peg$literalExpectation("\u203C", false);
  var peg$c498 = "\u2047";
  var peg$c499 = peg$literalExpectation("\u2047", false);
  var peg$c500 = "\u2049";
  var peg$c501 = peg$literalExpectation("\u2049", false);
  var peg$c502 = "\u2048";
  var peg$c503 = peg$literalExpectation("\u2048", false);
  var peg$c504 = "\u25A1";
  var peg$c505 = peg$literalExpectation("\u25A1", false);
  var peg$c506 = function() { return '$7'; };
  var peg$c507 = function() { return '$10'; };
  var peg$c508 = "\u221E";
  var peg$c509 = peg$literalExpectation("\u221E", false);
  var peg$c510 = function() { return '$13'; };
  var peg$c511 = "\u2A72";
  var peg$c512 = peg$literalExpectation("\u2A72", false);
  var peg$c513 = function() { return '$14'; };
  var peg$c514 = "\u2A71";
  var peg$c515 = peg$literalExpectation("\u2A71", false);
  var peg$c516 = function() { return '$15';};
  var peg$c517 = "\xB1";
  var peg$c518 = peg$literalExpectation("\xB1", false);
  var peg$c519 = function() { return '$16';};
  var peg$c520 = "\u2213";
  var peg$c521 = peg$literalExpectation("\u2213", false);
  var peg$c522 = function() { return '$17';};
  var peg$c523 = function() { return '$18';};
  var peg$c524 = "-+";
  var peg$c525 = peg$literalExpectation("-+", false);
  var peg$c526 = function() { return '$19';};
  var peg$c527 = "\u2A00";
  var peg$c528 = peg$literalExpectation("\u2A00", false);
  var peg$c529 = function() { return '$22'; };
  var peg$c530 = "\u27F3";
  var peg$c531 = peg$literalExpectation("\u27F3", false);
  var peg$c532 = function() { return '$32'; };
  var peg$c533 = "\u2192";
  var peg$c534 = peg$literalExpectation("\u2192", false);
  var peg$c535 = function() { return '$36'; };
  var peg$c536 = "\u2191";
  var peg$c537 = peg$literalExpectation("\u2191", false);
  var peg$c538 = function() { return '$40'; };
  var peg$c539 = "\u21C6";
  var peg$c540 = peg$literalExpectation("\u21C6", false);
  var peg$c541 = function() { return '$132'; };
  var peg$c542 = "D";
  var peg$c543 = peg$literalExpectation("D", false);
  var peg$c544 = function() { return '$220'; };
  var peg$c545 = /^[RNBQKP]/;
  var peg$c546 = peg$classExpectation(["R", "N", "B", "Q", "K", "P"], false, false);
  var peg$c547 = /^[RNBQ]/;
  var peg$c548 = peg$classExpectation(["R", "N", "B", "Q"], false, false);
  var peg$c549 = /^[a-h]/;
  var peg$c550 = peg$classExpectation([["a", "h"]], false, false);
  var peg$c551 = /^[1-8]/;
  var peg$c552 = peg$classExpectation([["1", "8"]], false, false);
  var peg$c553 = "x";
  var peg$c554 = peg$literalExpectation("x", false);

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsegames() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsegame();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsews();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsegame();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c0(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsews();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsegame();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c0(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c1(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegame() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsetags();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomments();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepgn();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetags() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsetag();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsews();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsetag();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c0(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsews();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetag();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c0(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c4(s3, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetag() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsebl();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetagKeyValue();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c6(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetagKeyValue() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseeventKey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestring();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesiteKey();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedateKey();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedate();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c9(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseroundKey();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsews();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsestring();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c10(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsewhiteTitleKey();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsews();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsestring();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c11(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseblackTitleKey();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsestring();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c12(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsewhiteEloKey();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsews();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseintegerOrDash();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c13(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseblackEloKey();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseintegerOrDash();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c14(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsewhiteUSCFKey();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsews();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseintegerString();
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c15(s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseblackUSCFKey();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseintegerString();
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c16(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsewhiteNAKey();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsews();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parsestring();
                            if (s3 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c17(s3);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseblackNAKey();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parsestring();
                              if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c18(s3);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsewhiteTypeKey();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsews();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsestring();
                                if (s3 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c19(s3);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseblackTypeKey();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parsews();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsestring();
                                  if (s3 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c20(s3);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parsewhiteKey();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parsews();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parsestring();
                                    if (s3 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c21(s3);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseblackKey();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parsews();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parsestring();
                                      if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c22(s3);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseresultKey();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsews();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseresult();
                                        if (s3 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c23(s3);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseeventDateKey();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsews();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parsedate();
                                          if (s3 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c24(s3);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseeventSponsorKey();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parsews();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parsestring();
                                            if (s3 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$c25(s3);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parsesectionKey();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parsews();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parsestring();
                                              if (s3 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c26(s3);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parsestageKey();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parsews();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parsestring();
                                                if (s3 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c27(s3);
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseboardKey();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parsews();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parseintegerString();
                                                  if (s3 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c28(s3);
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseopeningKey();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parsews();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parsestring();
                                                    if (s3 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$c29(s3);
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parsevariationKey();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parsews();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parsestring();
                                                      if (s3 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c30(s3);
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parsesubVariationKey();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parsews();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parsestring();
                                                        if (s3 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s1 = peg$c31(s3);
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseecoKey();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parsews();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parsestring();
                                                          if (s3 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c32(s3);
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parsenicKey();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parsews();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parsestring();
                                                            if (s3 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$c33(s3);
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parsetimeKey();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parsews();
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parsetime();
                                                              if (s3 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$c34(s3);
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseutcTimeKey();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parsews();
                                                              if (s2 !== peg$FAILED) {
                                                                s3 = peg$parsetime();
                                                                if (s3 !== peg$FAILED) {
                                                                  peg$savedPos = s0;
                                                                  s1 = peg$c35(s3);
                                                                  s0 = s1;
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseutcDateKey();
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parsews();
                                                                if (s2 !== peg$FAILED) {
                                                                  s3 = peg$parsedate();
                                                                  if (s3 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c36(s3);
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parsetimeControlKey();
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = peg$parsews();
                                                                  if (s2 !== peg$FAILED) {
                                                                    s3 = peg$parsetimeControl();
                                                                    if (s3 !== peg$FAILED) {
                                                                      peg$savedPos = s0;
                                                                      s1 = peg$c37(s3);
                                                                      s0 = s1;
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  s1 = peg$parsesetUpKey();
                                                                  if (s1 !== peg$FAILED) {
                                                                    s2 = peg$parsews();
                                                                    if (s2 !== peg$FAILED) {
                                                                      s3 = peg$parsestring();
                                                                      if (s3 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c38(s3);
                                                                        s0 = s1;
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    s1 = peg$parsefenKey();
                                                                    if (s1 !== peg$FAILED) {
                                                                      s2 = peg$parsews();
                                                                      if (s2 !== peg$FAILED) {
                                                                        s3 = peg$parsestring();
                                                                        if (s3 !== peg$FAILED) {
                                                                          peg$savedPos = s0;
                                                                          s1 = peg$c39(s3);
                                                                          s0 = s1;
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$currPos;
                                                                      s1 = peg$parseterminationKey();
                                                                      if (s1 !== peg$FAILED) {
                                                                        s2 = peg$parsews();
                                                                        if (s2 !== peg$FAILED) {
                                                                          s3 = peg$parsestring();
                                                                          if (s3 !== peg$FAILED) {
                                                                            peg$savedPos = s0;
                                                                            s1 = peg$c40(s3);
                                                                            s0 = s1;
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$currPos;
                                                                        s1 = peg$parseanotatorKey();
                                                                        if (s1 !== peg$FAILED) {
                                                                          s2 = peg$parsews();
                                                                          if (s2 !== peg$FAILED) {
                                                                            s3 = peg$parsestring();
                                                                            if (s3 !== peg$FAILED) {
                                                                              peg$savedPos = s0;
                                                                              s1 = peg$c41(s3);
                                                                              s0 = s1;
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$currPos;
                                                                          s1 = peg$parsemodeKey();
                                                                          if (s1 !== peg$FAILED) {
                                                                            s2 = peg$parsews();
                                                                            if (s2 !== peg$FAILED) {
                                                                              s3 = peg$parsestring();
                                                                              if (s3 !== peg$FAILED) {
                                                                                peg$savedPos = s0;
                                                                                s1 = peg$c42(s3);
                                                                                s0 = s1;
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$currPos;
                                                                            s1 = peg$parseplyCountKey();
                                                                            if (s1 !== peg$FAILED) {
                                                                              s2 = peg$parsews();
                                                                              if (s2 !== peg$FAILED) {
                                                                                s3 = peg$parseintegerString();
                                                                                if (s3 !== peg$FAILED) {
                                                                                  peg$savedPos = s0;
                                                                                  s1 = peg$c43(s3);
                                                                                  s0 = s1;
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$FAILED;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$FAILED;
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$currPos;
                                                                              s1 = peg$parsevariantKey();
                                                                              if (s1 !== peg$FAILED) {
                                                                                s2 = peg$parsews();
                                                                                if (s2 !== peg$FAILED) {
                                                                                  s3 = peg$parsestring();
                                                                                  if (s3 !== peg$FAILED) {
                                                                                    peg$savedPos = s0;
                                                                                    s1 = peg$c44(s3);
                                                                                    s0 = s1;
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$FAILED;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$currPos;
                                                                                s1 = peg$parsewhiteRatingDiffKey();
                                                                                if (s1 !== peg$FAILED) {
                                                                                  s2 = peg$parsews();
                                                                                  if (s2 !== peg$FAILED) {
                                                                                    s3 = peg$parsestring();
                                                                                    if (s3 !== peg$FAILED) {
                                                                                      peg$savedPos = s0;
                                                                                      s1 = peg$c45(s3);
                                                                                      s0 = s1;
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$FAILED;
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$currPos;
                                                                                  s1 = peg$parseblackRatingDiffKey();
                                                                                  if (s1 !== peg$FAILED) {
                                                                                    s2 = peg$parsews();
                                                                                    if (s2 !== peg$FAILED) {
                                                                                      s3 = peg$parsestring();
                                                                                      if (s3 !== peg$FAILED) {
                                                                                        peg$savedPos = s0;
                                                                                        s1 = peg$c46(s3);
                                                                                        s0 = s1;
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$currPos;
                                                                                    s1 = peg$parsewhiteFideIdKey();
                                                                                    if (s1 !== peg$FAILED) {
                                                                                      s2 = peg$parsews();
                                                                                      if (s2 !== peg$FAILED) {
                                                                                        s3 = peg$parsestring();
                                                                                        if (s3 !== peg$FAILED) {
                                                                                          peg$savedPos = s0;
                                                                                          s1 = peg$c47(s3);
                                                                                          s0 = s1;
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$currPos;
                                                                                      s1 = peg$parseblackFideIdKey();
                                                                                      if (s1 !== peg$FAILED) {
                                                                                        s2 = peg$parsews();
                                                                                        if (s2 !== peg$FAILED) {
                                                                                          s3 = peg$parsestring();
                                                                                          if (s3 !== peg$FAILED) {
                                                                                            peg$savedPos = s0;
                                                                                            s1 = peg$c48(s3);
                                                                                            s0 = s1;
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$currPos;
                                                                                        s1 = peg$parsewhiteTeamKey();
                                                                                        if (s1 !== peg$FAILED) {
                                                                                          s2 = peg$parsews();
                                                                                          if (s2 !== peg$FAILED) {
                                                                                            s3 = peg$parsestring();
                                                                                            if (s3 !== peg$FAILED) {
                                                                                              peg$savedPos = s0;
                                                                                              s1 = peg$c49(s3);
                                                                                              s0 = s1;
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$currPos;
                                                                                          s1 = peg$parseblackTeamKey();
                                                                                          if (s1 !== peg$FAILED) {
                                                                                            s2 = peg$parsews();
                                                                                            if (s2 !== peg$FAILED) {
                                                                                              s3 = peg$parsestring();
                                                                                              if (s3 !== peg$FAILED) {
                                                                                                peg$savedPos = s0;
                                                                                                s1 = peg$c50(s3);
                                                                                                s0 = s1;
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$currPos;
                                                                                            s1 = peg$currPos;
                                                                                            peg$silentFails++;
                                                                                            s2 = peg$parsevalidatedKey();
                                                                                            peg$silentFails--;
                                                                                            if (s2 !== peg$FAILED) {
                                                                                              peg$currPos = s1;
                                                                                              s1 = undefined;
                                                                                            } else {
                                                                                              s1 = peg$FAILED;
                                                                                            }
                                                                                            if (s1 !== peg$FAILED) {
                                                                                              s2 = peg$parsestringNoQuot();
                                                                                              if (s2 !== peg$FAILED) {
                                                                                                s3 = peg$parsews();
                                                                                                if (s3 !== peg$FAILED) {
                                                                                                  s4 = peg$parsestring();
                                                                                                  if (s4 !== peg$FAILED) {
                                                                                                    peg$savedPos = s0;
                                                                                                    s1 = peg$c51(s2, s4);
                                                                                                    s0 = s1;
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$FAILED;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$currPos;
                                                                                              s1 = peg$currPos;
                                                                                              peg$silentFails++;
                                                                                              s2 = peg$parsevalidatedKey();
                                                                                              peg$silentFails--;
                                                                                              if (s2 === peg$FAILED) {
                                                                                                s1 = undefined;
                                                                                              } else {
                                                                                                peg$currPos = s1;
                                                                                                s1 = peg$FAILED;
                                                                                              }
                                                                                              if (s1 !== peg$FAILED) {
                                                                                                s2 = peg$parsestringNoQuot();
                                                                                                if (s2 !== peg$FAILED) {
                                                                                                  s3 = peg$parsews();
                                                                                                  if (s3 !== peg$FAILED) {
                                                                                                    s4 = peg$parsestring();
                                                                                                    if (s4 !== peg$FAILED) {
                                                                                                      peg$savedPos = s0;
                                                                                                      s1 = peg$c52(s2, s4);
                                                                                                      s0 = s1;
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$FAILED;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$FAILED;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevalidatedKey() {
    var s0;

    s0 = peg$parsedateKey();
    if (s0 === peg$FAILED) {
      s0 = peg$parsewhiteEloKey();
      if (s0 === peg$FAILED) {
        s0 = peg$parseblackEloKey();
        if (s0 === peg$FAILED) {
          s0 = peg$parsewhiteUSCFKey();
          if (s0 === peg$FAILED) {
            s0 = peg$parseblackUSCFKey();
            if (s0 === peg$FAILED) {
              s0 = peg$parseresultKey();
              if (s0 === peg$FAILED) {
                s0 = peg$parseeventDateKey();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseboardKey();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsetimeKey();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseutcTimeKey();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseutcDateKey();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsetimeControlKey();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseplyCountKey();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseeventKey() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c53) {
      s0 = peg$c53;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c55) {
        s0 = peg$c55;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
    }

    return s0;
  }

  function peg$parsesiteKey() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c57) {
      s0 = peg$c57;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c59) {
        s0 = peg$c59;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
    }

    return s0;
  }

  function peg$parsedateKey() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c61) {
      s0 = peg$c61;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c63) {
        s0 = peg$c63;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
    }

    return s0;
  }

  function peg$parseroundKey() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c65) {
      s0 = peg$c65;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c67) {
        s0 = peg$c67;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
    }

    return s0;
  }

  function peg$parsewhiteKey() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c69) {
      s0 = peg$c69;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c70); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c71) {
        s0 = peg$c71;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
    }

    return s0;
  }

  function peg$parseblackKey() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c73) {
      s0 = peg$c73;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c75) {
        s0 = peg$c75;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
    }

    return s0;
  }

  function peg$parseresultKey() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c77) {
      s0 = peg$c77;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c79) {
        s0 = peg$c79;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
    }

    return s0;
  }

  function peg$parsewhiteTitleKey() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c81) {
      s0 = peg$c81;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c83) {
        s0 = peg$c83;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c85) {
          s0 = peg$c85;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c87) {
            s0 = peg$c87;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseblackTitleKey() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c89) {
      s0 = peg$c89;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c91) {
        s0 = peg$c91;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c93) {
          s0 = peg$c93;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c94); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c95) {
            s0 = peg$c95;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsewhiteEloKey() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c97) {
      s0 = peg$c97;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c99) {
        s0 = peg$c99;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c101) {
          s0 = peg$c101;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c102); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c103) {
            s0 = peg$c103;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c104); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c105) {
              s0 = peg$c105;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c106); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseblackEloKey() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c107) {
      s0 = peg$c107;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c108); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c109) {
        s0 = peg$c109;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c111) {
          s0 = peg$c111;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c113) {
            s0 = peg$c113;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c114); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c115) {
              s0 = peg$c115;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c116); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsewhiteUSCFKey() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c117) {
      s0 = peg$c117;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c118); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c119) {
        s0 = peg$c119;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c121) {
          s0 = peg$c121;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c122); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c123) {
            s0 = peg$c123;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c124); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c125) {
              s0 = peg$c125;
              peg$currPos += 9;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c126); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseblackUSCFKey() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c127) {
      s0 = peg$c127;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c128); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c129) {
        s0 = peg$c129;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c130); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c131) {
          s0 = peg$c131;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c132); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c133) {
            s0 = peg$c133;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c134); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c135) {
              s0 = peg$c135;
              peg$currPos += 9;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c136); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsewhiteNAKey() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c137) {
      s0 = peg$c137;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c139) {
        s0 = peg$c139;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c141) {
          s0 = peg$c141;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c142); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c143) {
            s0 = peg$c143;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c144); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c145) {
              s0 = peg$c145;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c146); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c147) {
                s0 = peg$c147;
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c148); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseblackNAKey() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c149) {
      s0 = peg$c149;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c150); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c151) {
        s0 = peg$c151;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c153) {
          s0 = peg$c153;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c154); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c155) {
            s0 = peg$c155;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c156); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c157) {
              s0 = peg$c157;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c158); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c159) {
                s0 = peg$c159;
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c160); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsewhiteTypeKey() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c161) {
      s0 = peg$c161;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c162); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c163) {
        s0 = peg$c163;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c165) {
          s0 = peg$c165;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c166); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c167) {
            s0 = peg$c167;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c168); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseblackTypeKey() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c169) {
      s0 = peg$c169;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c170); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c171) {
        s0 = peg$c171;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c172); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c173) {
          s0 = peg$c173;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c174); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c175) {
            s0 = peg$c175;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c176); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseeventDateKey() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c177) {
      s0 = peg$c177;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c179) {
        s0 = peg$c179;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c180); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c181) {
          s0 = peg$c181;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c182); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c183) {
            s0 = peg$c183;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c184); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseeventSponsorKey() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c185) {
      s0 = peg$c185;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 12) === peg$c187) {
        s0 = peg$c187;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c189) {
          s0 = peg$c189;
          peg$currPos += 12;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c190); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 12) === peg$c191) {
            s0 = peg$c191;
            peg$currPos += 12;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c192); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesectionKey() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c193) {
      s0 = peg$c193;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c194); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c195) {
        s0 = peg$c195;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c196); }
      }
    }

    return s0;
  }

  function peg$parsestageKey() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c197) {
      s0 = peg$c197;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c198); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c199) {
        s0 = peg$c199;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c200); }
      }
    }

    return s0;
  }

  function peg$parseboardKey() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c201) {
      s0 = peg$c201;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c202); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c203) {
        s0 = peg$c203;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }
    }

    return s0;
  }

  function peg$parseopeningKey() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c205) {
      s0 = peg$c205;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c206); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c207) {
        s0 = peg$c207;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c208); }
      }
    }

    return s0;
  }

  function peg$parsevariationKey() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c209) {
      s0 = peg$c209;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c210); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c211) {
        s0 = peg$c211;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }
    }

    return s0;
  }

  function peg$parsesubVariationKey() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c213) {
      s0 = peg$c213;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c214); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 12) === peg$c215) {
        s0 = peg$c215;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c216); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c217) {
          s0 = peg$c217;
          peg$currPos += 12;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c218); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 12) === peg$c219) {
            s0 = peg$c219;
            peg$currPos += 12;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c220); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseecoKey() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c221) {
      s0 = peg$c221;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c222); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c223) {
        s0 = peg$c223;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c224); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c225) {
          s0 = peg$c225;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c226); }
        }
      }
    }

    return s0;
  }

  function peg$parsenicKey() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c227) {
      s0 = peg$c227;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c228); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c229) {
        s0 = peg$c229;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c230); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c231) {
          s0 = peg$c231;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c232); }
        }
      }
    }

    return s0;
  }

  function peg$parsetimeKey() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c233) {
      s0 = peg$c233;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c234); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c235) {
        s0 = peg$c235;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c236); }
      }
    }

    return s0;
  }

  function peg$parseutcTimeKey() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c237) {
      s0 = peg$c237;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c238); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c239) {
        s0 = peg$c239;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c240); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c241) {
          s0 = peg$c241;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c242); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c243) {
            s0 = peg$c243;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c244); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c245) {
              s0 = peg$c245;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c246); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c247) {
                s0 = peg$c247;
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c248); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseutcDateKey() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c249) {
      s0 = peg$c249;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c250); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c251) {
        s0 = peg$c251;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c252); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c253) {
          s0 = peg$c253;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c255) {
            s0 = peg$c255;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c256); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c257) {
              s0 = peg$c257;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c258); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c259) {
                s0 = peg$c259;
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c260); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetimeControlKey() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c261) {
      s0 = peg$c261;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c262); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c263) {
        s0 = peg$c263;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c264); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c265) {
          s0 = peg$c265;
          peg$currPos += 11;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c266); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c267) {
            s0 = peg$c267;
            peg$currPos += 11;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c268); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesetUpKey() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c269) {
      s0 = peg$c269;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c270); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c271) {
        s0 = peg$c271;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c272); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c273) {
          s0 = peg$c273;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c274); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c275) {
            s0 = peg$c275;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c276); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefenKey() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c277) {
      s0 = peg$c277;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c278); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c279) {
        s0 = peg$c279;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c280); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c281) {
          s0 = peg$c281;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c282); }
        }
      }
    }

    return s0;
  }

  function peg$parseterminationKey() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c283) {
      s0 = peg$c283;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c284); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c285) {
        s0 = peg$c285;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c286); }
      }
    }

    return s0;
  }

  function peg$parseanotatorKey() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c287) {
      s0 = peg$c287;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c288); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c289) {
        s0 = peg$c289;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c290); }
      }
    }

    return s0;
  }

  function peg$parsemodeKey() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c291) {
      s0 = peg$c291;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c292); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c293) {
        s0 = peg$c293;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c294); }
      }
    }

    return s0;
  }

  function peg$parseplyCountKey() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c295) {
      s0 = peg$c295;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c296); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c297) {
        s0 = peg$c297;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c298); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c299) {
          s0 = peg$c299;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c300); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c301) {
            s0 = peg$c301;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c302); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevariantKey() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c303) {
      s0 = peg$c303;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c304); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c305) {
        s0 = peg$c305;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }
    }

    return s0;
  }

  function peg$parsewhiteRatingDiffKey() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c307) {
      s0 = peg$c307;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c308); }
    }

    return s0;
  }

  function peg$parseblackRatingDiffKey() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c309) {
      s0 = peg$c309;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c310); }
    }

    return s0;
  }

  function peg$parsewhiteFideIdKey() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c311) {
      s0 = peg$c311;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c312); }
    }

    return s0;
  }

  function peg$parseblackFideIdKey() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c313) {
      s0 = peg$c313;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c314); }
    }

    return s0;
  }

  function peg$parsewhiteTeamKey() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c315) {
      s0 = peg$c315;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c316); }
    }

    return s0;
  }

  function peg$parseblackTeamKey() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c317) {
      s0 = peg$c317;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c318); }
    }

    return s0;
  }

  function peg$parsews() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c320.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c321); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c320.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c319); }
    }

    return s0;
  }

  function peg$parsewsp() {
    var s0, s1;

    s0 = [];
    if (peg$c320.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c321); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c320.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c321); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseeol() {
    var s0, s1;

    s0 = [];
    if (peg$c322.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c323); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c322.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c323); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsechar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsechar();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c325(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c324); }
    }

    return s0;
  }

  function peg$parsestringNoQuot() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c326.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c327); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$c326.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c327); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c325(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsequotation_mark() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c328;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c329); }
    }

    return s0;
  }

  function peg$parsechar() {
    var s0;

    if (peg$c330.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c331); }
    }

    return s0;
  }

  function peg$parsedate() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (peg$c332.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c333); }
      }
      if (s3 !== peg$FAILED) {
        if (peg$c332.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c333); }
        }
        if (s4 !== peg$FAILED) {
          if (peg$c332.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c333); }
          }
          if (s5 !== peg$FAILED) {
            if (peg$c332.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c333); }
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c334;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c335); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (peg$c332.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c333); }
          }
          if (s5 !== peg$FAILED) {
            if (peg$c332.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c333); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c334;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c335); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (peg$c332.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c333); }
              }
              if (s7 !== peg$FAILED) {
                if (peg$c332.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c333); }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsequotation_mark();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c336(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetime() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c337.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c337.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c338); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c339;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c340); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c337.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c338); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c337.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c338); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s5 = peg$c339;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c340); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c337.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c338); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c337.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c338); }
                  }
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsemillis();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsequotation_mark();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c341(s2, s4, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemillis() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c334;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c335); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c337.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c337.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c338); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c342(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimeControl() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetcnq();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c343(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetcnq() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 63) {
      s1 = peg$c344;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c345); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c346();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c347;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c348); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c349();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseinteger();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c350;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c351); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinteger();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c352(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseinteger();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s2 = peg$c353;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c354); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseinteger();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c355(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseinteger();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c356(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c357;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c358); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseinteger();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c359(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseresult() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinnerResult();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c343(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinnerResult() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c360) {
      s1 = peg$c360;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c361); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c362(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c363) {
        s1 = peg$c363;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c364); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c343(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c365) {
          s1 = peg$c365;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c366); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c343(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 42) {
            s1 = peg$c357;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c358); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c343(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseintegerOrDash() {
    var s0, s1, s2, s3;

    s0 = peg$parseintegerString();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsequotation_mark();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c347;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c348); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequotation_mark();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseintegerString() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c337.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c337.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c338); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c367(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepgn() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomments();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsemoveNumber();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsehalfMove();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsenags();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsews();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsecomments();
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsews();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsevariation();
                          if (s12 === peg$FAILED) {
                            s12 = null;
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parsepgn();
                            if (s13 === peg$FAILED) {
                              s13 = null;
                            }
                            if (s13 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c368(s2, s4, s6, s8, s10, s12, s13);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseendGame();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c369(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseendGame() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseinnerResult();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c370(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecomments() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecomment();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsews();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomment();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c371(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomment();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c371(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c372(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecl();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinnerComment();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecr();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c373(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecommentEndOfLine();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c374(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseinnerComment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebl();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c375) {
          s3 = peg$c375;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c376); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewsp();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecolorFields();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsebr();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$currPos;
                    s11 = peg$parseinnerComment();
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s10;
                      s11 = peg$c377(s5, s11);
                    }
                    s10 = s11;
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$currPos;
                      s11 = peg$parseinnerComment();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s10;
                        s11 = peg$c377(s5, s11);
                      }
                      s10 = s11;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c378(s5, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebl();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c379) {
            s3 = peg$c379;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c380); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewsp();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecolorArrows();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsebr();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews();
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$currPos;
                      s11 = peg$parseinnerComment();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s10;
                        s11 = peg$c381(s5, s11);
                      }
                      s10 = s11;
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$currPos;
                        s11 = peg$parseinnerComment();
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s10;
                          s11 = peg$c381(s5, s11);
                        }
                        s10 = s11;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c382(s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsebl();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 37) {
              s3 = peg$c383;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c384); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseclockCommand();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsewsp();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseclockValue();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsews();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsebr();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsews();
                        if (s9 !== peg$FAILED) {
                          s10 = [];
                          s11 = peg$currPos;
                          s12 = peg$parseinnerComment();
                          if (s12 !== peg$FAILED) {
                            peg$savedPos = s11;
                            s12 = peg$c385(s4, s6, s12);
                          }
                          s11 = s12;
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$currPos;
                            s12 = peg$parseinnerComment();
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s11;
                              s12 = peg$c385(s4, s6, s12);
                            }
                            s11 = s12;
                          }
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c386(s4, s6, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsews();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsebl();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c387) {
                s3 = peg$c387;
                peg$currPos += 5;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c388); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsewsp();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsestringNoQuot();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsews();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsebr();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsews();
                        if (s8 !== peg$FAILED) {
                          s9 = [];
                          s10 = peg$currPos;
                          s11 = peg$parseinnerComment();
                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s10;
                            s11 = peg$c389(s5, s11);
                          }
                          s10 = s11;
                          while (s10 !== peg$FAILED) {
                            s9.push(s10);
                            s10 = peg$currPos;
                            s11 = peg$parseinnerComment();
                            if (s11 !== peg$FAILED) {
                              peg$savedPos = s10;
                              s11 = peg$c389(s5, s11);
                            }
                            s10 = s11;
                          }
                          if (s9 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c390(s5, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebl();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 37) {
                  s3 = peg$c383;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c384); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsestringNoQuot();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsewsp();
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parsenbr();
                      if (s7 !== peg$FAILED) {
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parsenbr();
                        }
                      } else {
                        s6 = peg$FAILED;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsebr();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parsews();
                          if (s8 !== peg$FAILED) {
                            s9 = [];
                            s10 = peg$currPos;
                            s11 = peg$parseinnerComment();
                            if (s11 !== peg$FAILED) {
                              peg$savedPos = s10;
                              s11 = peg$c391(s4, s11);
                            }
                            s10 = s11;
                            while (s10 !== peg$FAILED) {
                              s9.push(s10);
                              s10 = peg$currPos;
                              s11 = peg$parseinnerComment();
                              if (s11 !== peg$FAILED) {
                                peg$savedPos = s10;
                                s11 = peg$c391(s4, s11);
                              }
                              s10 = s11;
                            }
                            if (s9 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c392(s4, s9);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parsenonCommand();
              if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parsenonCommand();
                }
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseinnerComment();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c393(s1, s5);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$currPos;
                  s4 = peg$parsews();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseinnerComment();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c393(s1, s5);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c394(s1, s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenonCommand() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c395) {
      s2 = peg$c395;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c396); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 125) {
        s3 = peg$c397;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c398); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c399); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c400(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenbr() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsebr();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c399); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c400(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecommentEndOfLine() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesemicolon();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c401.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c401.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c402); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseeol();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c403(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolorFields() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsecolorField();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c404;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c405); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsews();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecolorField();
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c404;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c405); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecolorField();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c406(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolorField() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsecolor();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefield();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c407(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolorArrows() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsecolorArrow();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c404;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c405); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsews();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecolorArrow();
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c404;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c405); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecolorArrow();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c406(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolorArrow() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecolor();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefield();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefield();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c408(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolor() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 89) {
      s1 = peg$c409;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c410); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c411();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 71) {
        s1 = peg$c412;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c413); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c414();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 82) {
          s1 = peg$c415;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c416); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c417();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 66) {
            s1 = peg$c418;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c419); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c420();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsefield() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsecolumn();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserow();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c421(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecl() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 123) {
      s0 = peg$c422;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c423); }
    }

    return s0;
  }

  function peg$parsecr() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 125) {
      s0 = peg$c397;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c398); }
    }

    return s0;
  }

  function peg$parsebl() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 91) {
      s0 = peg$c424;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c425); }
    }

    return s0;
  }

  function peg$parsebr() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 93) {
      s0 = peg$c426;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c427); }
    }

    return s0;
  }

  function peg$parsesemicolon() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c428;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c429); }
    }

    return s0;
  }

  function peg$parseclockCommand() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c430) {
      s1 = peg$c430;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c431); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c432();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c433) {
        s1 = peg$c433;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c434); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c435();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c436) {
          s1 = peg$c436;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c437); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c438();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c439) {
            s1 = peg$c439;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c440); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c441();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseclockValue() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsedigit();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedigit();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c339;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c340); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigit();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedigit();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s6 = peg$c339;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c340); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsedigit();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsedigit();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c442(s1, s2, s4, s5, s7, s8);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedigit() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$c337.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c338); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c443(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsevariation() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsepl();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepgn();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsevariation();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c444(s2, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepl() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c445;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c446); }
    }

    return s0;
  }

  function peg$parsepr() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c447;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c448); }
    }

    return s0;
  }

  function peg$parsemoveNumber() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseinteger();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhiteSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhiteSpace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsedot();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsedot();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c449(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedot() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c334;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c335); }
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c337.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c338); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c337.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c338); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c367(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c450); }
    }

    return s0;
  }

  function peg$parsewhiteSpace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 32) {
      s2 = peg$c451;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c452); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c451;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c452); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c453();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsehalfMove() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsefigure();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsecheckdisc();
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsediscriminator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestrike();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecolumn();
            if (s5 !== peg$FAILED) {
              s6 = peg$parserow();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsepromotion();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsecheck();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c454(s1, s3, s4, s5, s6, s7, s8);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsefigure();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolumn();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserow();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestrikeOrDash();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecolumn();
              if (s5 !== peg$FAILED) {
                s6 = peg$parserow();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsepromotion();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecheck();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c455(s1, s2, s3, s4, s5, s6, s7, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefigure();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestrike();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecolumn();
            if (s3 !== peg$FAILED) {
              s4 = peg$parserow();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsepromotion();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsecheck();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c456(s1, s2, s3, s4, s5, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c457) {
            s1 = peg$c457;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c458); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecheck();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c459(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c460) {
              s1 = peg$c460;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c461); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsecheck();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c462(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsefigure();
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 64) {
                  s2 = peg$c463;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c464); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsecolumn();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parserow();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c465(s1, s3, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecheck() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c466) {
      s3 = peg$c466;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c467); }
    }
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 43) {
        s3 = peg$c353;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c354); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c468(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c469) {
        s3 = peg$c469;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c470); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s3 = peg$c471;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c472); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c468(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsepromotion() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c473;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c474); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepromFigure();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c475(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenags() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsenag();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenags();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c476(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenag() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c477;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c478); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinteger();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c479(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c480) {
        s1 = peg$c480;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c481); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c482();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c483) {
          s1 = peg$c483;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c484); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c485();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c486) {
            s1 = peg$c486;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c487); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c488();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c489) {
              s1 = peg$c489;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c490); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c491();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 33) {
                s1 = peg$c492;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c493); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c494();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 63) {
                  s1 = peg$c344;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c345); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c495();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 8252) {
                    s1 = peg$c496;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c497); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c482();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 8263) {
                      s1 = peg$c498;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c499); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c485();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 8265) {
                        s1 = peg$c500;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c501); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c488();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 8264) {
                          s1 = peg$c502;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c503); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c491();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 9633) {
                            s1 = peg$c504;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c505); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c506();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 61) {
                              s1 = peg$c473;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c474); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c507();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 8734) {
                                s1 = peg$c508;
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c509); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c510();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 10866) {
                                  s1 = peg$c511;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c512); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c513();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 10865) {
                                    s1 = peg$c514;
                                    peg$currPos++;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c515); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c516();
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 177) {
                                      s1 = peg$c517;
                                      peg$currPos++;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c518); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c519();
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 8723) {
                                        s1 = peg$c520;
                                        peg$currPos++;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c521); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c522();
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 2) === peg$c466) {
                                          s1 = peg$c466;
                                          peg$currPos += 2;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c467); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c523();
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.substr(peg$currPos, 2) === peg$c524) {
                                            s1 = peg$c524;
                                            peg$currPos += 2;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c525); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c526();
                                          }
                                          s0 = s1;
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 10752) {
                                              s1 = peg$c527;
                                              peg$currPos++;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c528); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$c529();
                                            }
                                            s0 = s1;
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.charCodeAt(peg$currPos) === 10227) {
                                                s1 = peg$c530;
                                                peg$currPos++;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c531); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c532();
                                              }
                                              s0 = s1;
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                if (input.charCodeAt(peg$currPos) === 8594) {
                                                  s1 = peg$c533;
                                                  peg$currPos++;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c534); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c535();
                                                }
                                                s0 = s1;
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  if (input.charCodeAt(peg$currPos) === 8593) {
                                                    s1 = peg$c536;
                                                    peg$currPos++;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c537); }
                                                  }
                                                  if (s1 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c538();
                                                  }
                                                  s0 = s1;
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.charCodeAt(peg$currPos) === 8646) {
                                                      s1 = peg$c539;
                                                      peg$currPos++;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c540); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$c541();
                                                    }
                                                    s0 = s1;
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      if (input.charCodeAt(peg$currPos) === 68) {
                                                        s1 = peg$c542;
                                                        peg$currPos++;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c543); }
                                                      }
                                                      if (s1 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c544();
                                                      }
                                                      s0 = s1;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsediscriminator() {
    var s0;

    s0 = peg$parsecolumn();
    if (s0 === peg$FAILED) {
      s0 = peg$parserow();
    }

    return s0;
  }

  function peg$parsecheckdisc() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsediscriminator();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestrike();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecolumn();
        if (s3 !== peg$FAILED) {
          s4 = peg$parserow();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefigure() {
    var s0;

    if (peg$c545.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c546); }
    }

    return s0;
  }

  function peg$parsepromFigure() {
    var s0;

    if (peg$c547.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c548); }
    }

    return s0;
  }

  function peg$parsecolumn() {
    var s0;

    if (peg$c549.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c550); }
    }

    return s0;
  }

  function peg$parserow() {
    var s0;

    if (peg$c551.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c552); }
    }

    return s0;
  }

  function peg$parsestrike() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 120) {
      s0 = peg$c553;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c554); }
    }

    return s0;
  }

  function peg$parsestrikeOrDash() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 120) {
      s0 = peg$c553;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c554); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c347;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c348); }
      }
    }

    return s0;
  }


      var messages = [];

      function makeInteger(o) {
          return parseInt(o.join(""), 10);
      }
      function mi(o) {
          return o.join("").match(/\?/) ? o.join("") : makeInteger(o); }

    function merge(array) {
      var ret = {}
     // return array
      array.forEach(function(json) {
        for (var key in json) {
          if (Array.isArray(json[key])) {
              ret[key] = ret[key] ? ret[key].concat(json[key]) : json[key]
          } else {
              ret[key] = ret[key] ? trimEnd(ret[key]) + " " + trimStart(json[key]) : json[key]
          }
        }
      })
      return ret
    }

    function trimStart(st) {
      if (typeof st !== "string") return st
      var r=/^\s+/
      return st.replace(r,'')
    }

    function trimEnd(st) {
      if (typeof st !== "string") return st
      var r=/\s+$/
      return st.replace(r,'')
    }



  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
